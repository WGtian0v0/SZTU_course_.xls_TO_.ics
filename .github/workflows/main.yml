# .github/workflows/build.yml
name: Build Nuitka Single File Executable

on:
  push:
    tags: ['v*']
  release:
    types: [published]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'
  APP_NAME: 'SchoolAuto'
  SOURCE_DIR: 'source'

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install nuitka

    - name: Install Playwright browsers
      run: |
        python -m playwright install chromium

    - name: Build with Nuitka (from source directory)
      run: |
        cd ${{ env.SOURCE_DIR }}
        python -m nuitka ^
          --standalone ^
          --onefile ^
          --windows-console-mode=disable ^
          --include-package=icalendar ^
          --include-package=keyring ^
          --include-package=pandas ^
          --include-package=playwright ^
          --include-package=pytz ^
          --include-package=greenlet ^
          --include-package=pyee ^
          --include-package=websockets ^
          --include-data-dir=%USERPROFILE%\.cache\ms-playwright=playwright\browsers ^
          --output-dir=../dist ^
          --output-filename=${{ env.APP_NAME }}-Windows.exe ^
          main.py

    - name: Create checksum
      run: |
        CertUtil -hashfile dist\${{ env.APP_NAME }}-Windows.exe SHA256 | findstr /v "CertUtil" > dist\${{ env.APP_NAME }}-Windows.exe.sha256

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-Windows
        path: |
          dist/${{ env.APP_NAME }}-Windows.exe
          dist/${{ env.APP_NAME }}-Windows.exe.sha256
        retention-days: 30

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y patchelf

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install nuitka

    - name: Install Playwright browsers
      run: |
        python -m playwright install chromium

    - name: Build with Nuitka (from source directory)
      run: |
        cd ${{ env.SOURCE_DIR }}
        python -m nuitka \
          --standalone \
          --onefile \
          --include-package=icalendar \
          --include-package=keyring \
          --include-package=pandas \
          --include-package=playwright \
          --include-package=pytz \
          --include-package=greenlet \
          --include-package=pyee \
          --include-package=websockets \
          --include-data-dir=$HOME/.cache/ms-playwright=playwright/browsers \
          --output-dir=../dist \
          --output-filename=${{ env.APP_NAME }}-Linux \
          main.py

    - name: Make executable
      run: chmod +x dist/${{ env.APP_NAME }}-Linux

    - name: Create checksum
      run: |
        cd dist && sha256sum ${{ env.APP_NAME }}-Linux > ${{ env.APP_NAME }}-Linux.sha256

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-Linux
        path: |
          dist/${{ env.APP_NAME }}-Linux
          dist/${{ env.APP_NAME }}-Linux.sha256
        retention-days: 30

  create-release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.APP_NAME }}-Windows/${{ env.APP_NAME }}-Windows.exe
          ${{ env.APP_NAME }}-Linux/${{ env.APP_NAME }}-Linux
        body: |
          自动构建的 SchoolAuto 单文件可执行程序
          
          **构建信息:**
          - 工作目录: ${{ env.SOURCE_DIR }}/
          - 主程序: main.py
          - 构建时间: ${{ github.event.release.created_at }}
          - 提交版本: ${{ github.sha }}
          
          **包含依赖:**
          - icalendar==6.3.1
          - keyring==25.6.0
          - pandas==2.3.3
          - playwright==1.55.0
          - pytz==2025.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
